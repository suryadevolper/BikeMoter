/**
 * IE Handling Script Implementation
 * **/
(function (_global) {
    if(_global){
        /**Script to Handle "name" property of all the Function objects - Start**/
        var setName = function setName(fn) {
            if(fn===Function){
                Object.defineProperty(Function.prototype, 'name', {
                    get: function() {
                        var name = "";
                        if((this.hasOwnProperty!== undefined) && (typeof(this.hasOwnProperty)==="function") && this.hasOwnProperty('name')){
                            name = (this.toString().match(/^function\s*([^\s(]+)/) || [])[1];
                            try{Object.defineProperty(this, 'name', { value: name });}
                            catch(e){console.info(this," already name defined");}
                        }
                        return name;
                    }
                });
            }
            if ((typeof(fn)==="function")) {
                var fnExpr = fn.toString().split("function ");
                var name = (fnExpr && fnExpr.length>1) ?  (fnExpr[1].split("()")[0]) : "";
                try{Object.defineProperty(fn, 'name', {get: function() {return name;}});}
                catch(e){console.info(this," already name defined");}
            }
        };
        Object.getOwnPropertyNames(_global)
            .filter(function(eachObj){return (typeof(_global[eachObj])==="function") && (_global[eachObj].name===undefined);})
            .forEach(function (fnName) { setName(_global[fnName]);});
        /**Script to Handle "name" property of all the Function objects - End**/
    }
})(window);

(function () {

	  if ( typeof window.CustomEvent === "function" ) return false;

	  function CustomEvent ( event, params ) {
	    params = params || { bubbles: false, cancelable: false, detail: undefined };
	    var evt = document.createEvent( 'CustomEvent' );
	    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
	    return evt;
	   }

	  CustomEvent.prototype = window.Event.prototype;

	  window.CustomEvent = CustomEvent;
})();


/*******************************************JS Helper - Start******************************************************/
/**
 * This module consist all the required helper function .
 * This module is to enhance its implementation. Keep adding commonly used functions in this module and use this module as dependency.
 */
 (function (_global) {
    var _jsHelper = (function () {
        var jsHelperObj = {};
        var not = function notOperator(boolVal) {
            return isBool(boolVal) ? !boolVal : boolVal;
        }
        jsHelperObj.notOperator = jsHelperObj.not = not;
        var and = function andOperator(condition1, condition2) {
            if (not((isBool(condition1) && isBool(condition2)))) {
                return false;
            }
            return (condition1 && condition2);
        }
        jsHelperObj.andOperator = jsHelperObj.and = and;
        var andMany = function andOperatorMany() {
            var result = true;
            for (var i in arguments) {
                result = and(result, arguments[i]);
            }
            return result;
        }
        jsHelperObj.andOperatorMany = jsHelperObj.andMany = andMany;
        var or = function orOperator(condition1, condition2) {
            if (not((isBool(condition1) && isBool(condition2)))) {
                return false;
            }
            return (condition1 || condition2);
        }
        jsHelperObj.orOperator = jsHelperObj.or = or;
        var orMany = function orOperatorMany() {
            var result = false;
            for (var i in arguments) {
                result = or(result, arguments[i]);
            }
            return result;
        }
        jsHelperObj.orOperatorMany = jsHelperObj.orMany = orMany;
        var _opOneWithMany = function _operatorOneWithMany(fnOp,args){
            if(andMany(isFunc(fnOp),isDefined(args),_isLenPropDef(args))){
                var status = isEqRef(fnOp,and);
                if(isGt(args.length,2)){
                    var value = args[0];
                    var fnBool = isEqRef(fnOp,and) ? isFalse : isTrue;
                    for(var i=1; isLt(i,args.length); i++){
                        status = fnOp(status,isEqVal(value,args[i]));
                        if(fnBool(status)){
                            break;
                        }
                    }
                }
                return status;
            }
            return false;
        };
        var orOneWithMany = function orOneWithMany(){
            return _opOneWithMany(or,arguments);
        };
        jsHelperObj.orOneWithMany = jsHelperObj.orOneWithMany = orOneWithMany;
        var andOneWithMany = function andOneWithMany(){
            return _opOneWithMany(and,arguments);
        };
        jsHelperObj.andOneWithMany = jsHelperObj.andOneWithMany = andOneWithMany;
        var ternaryFunc = function ternaryOperatorFunction(condition, conditionTrueValue, conditionFalseValue) {
            if(orMany(isUndefined(condition), isUndefined(conditionTrueValue), isUndefined(conditionFalseValue))){
                return false;
            }
            return condition ? conditionTrueValue : conditionFalseValue;
        };
        jsHelperObj.ternaryOperatorFunction = jsHelperObj.ternaryFunc = ternaryFunc;
        var isEqRef = function isEqualByReference() {
            var mingArg = 2;
            if (isLt(arguments.length, mingArg)) {
                exceptionUtility.throwErr("Minumum " + mingArg + " arguments required!")
            }
            for (var i = 0; i < arguments.length - 1; i++) {
                if (arguments[i] !== arguments[i + 1]) {
                    return false;
                }
            }
            return true;
        }
        jsHelperObj.isEqualByReference = jsHelperObj.isEqRef = isEqRef;
        var isEqVal = function isEqualByValue(val1, val2, caseInsensitive) {
            var val1Str = String(val1);
            var val2Str = String(val2);
            if (isTrue(caseInsensitive)) {
                val1Str = val1Str.toLowerCase();
                val2Str = val2Str.toLowerCase();
            }
            return isEqRef(val1Str, val2Str);
        }
        jsHelperObj.isEqualByValue = jsHelperObj.isEqVal = isEqVal;
        var isEqValMany = function isEqualByValueMany() {
            for (var i = 0; i < arguments.length - 1; i++) {
                if (!isEqVal(arguments[i], arguments[i + 1])) {
                    return false;
                }
            }
            return true;
        }
        jsHelperObj.isEqualByValueMany = jsHelperObj.isEqValMany = isEqValMany;
        var isEqValManyCI = function isEqualByValueManyCI() {
            for (var i = 0; i < arguments.length - 1; i++) {
                if (!isEqVal(arguments[i], arguments[i + 1], true)) {
                    return false;
                }
            }
            return true;
        }
        jsHelperObj.isEqualByValueManyCI = jsHelperObj.isEqValManyCI = isEqValManyCI;
        var isGt = function isGreaterThan(val1, val2) {
            return (isNum(val1) && isNum(val2)) ? (val1 > val2) : false;
        }
        jsHelperObj.isGreaterThan = jsHelperObj.isGt = isGt;
        var isLt = function isLessThan(val1, val2) {
            return (isNum(val1) && isNum(val2)) ? (val1 < val2) : false;
        }
        jsHelperObj.isLessThan = jsHelperObj.isLt = isLt;
        var isDefined = function isDefined(val,strict) {
            return not(isUndefined(val,isTrue(strict)));
        };
        jsHelperObj.isDefined = jsHelperObj.isDef = isDefined;
        var isUndefined = function isUndefined(val,strict) {
            return isTrue(strict) ? (val===undefined) : (val ? false : true);
        };
        jsHelperObj.isUndefined = jsHelperObj.isUndef = isUndefined;
        var isNull = function isNullStrict(val) {
            return isEqVal(val, null);
        };
        jsHelperObj.isNull = jsHelperObj.isNull = isNull;
        var isNonNull = function isNonNullStrict(val) {
            return !isNull(val);
        };
        jsHelperObj.isNonNull = jsHelperObj.isNonNull = isNonNull;
        var isTrue = function isBooleanTrue(val) {
            return val === true;
        };
        jsHelperObj.isTrue = isTrue;
        var isFalse = function isBooleanFalse(val) {
            return val === false;
        };
        jsHelperObj.isFalse = isFalse;
        var isFunc = function isFunction(fn) {
            return isDefined(fn) && (fn instanceof Function);
        };
        jsHelperObj.isFunction = jsHelperObj.isFunc = isFunc;
        var isObj = function isObject(obj) {
            return isDefined(obj) && (obj instanceof Object);
        };
        jsHelperObj.isObject = jsHelperObj.isObj = isObj;
        var isStr = function isString(str) {
            return isDefined(str,true) && ((str instanceof String) || (typeof (str) === String.name.toLowerCase()));
        };
        jsHelperObj.isString = jsHelperObj.isStr = isStr;
        var isNum = function isNumber(num,allowBool) {
            num = and(isTrue(allowBool),isTrue(num)) ? 1 : and(isTrue(allowBool),isFalse(num)) ? 0 : num;
            return isDefined(num,true) && ((num instanceof Number) || (typeof (num) === Number.name.toLowerCase()));
        };
        jsHelperObj.isNumber = jsHelperObj.isNum = isNum;
        var isInt = function isInteger(num) {
            return isNum(num) && Number.isSafeInteger(num);
        };
        jsHelperObj.isInteger = jsHelperObj.isInt = isInt;
        var isBool = function isBoolean(bool) {
            return ((bool instanceof Boolean) || (typeof (bool) === Boolean.name.toLowerCase()));
        };
        jsHelperObj.isBoolean = jsHelperObj.isBool = isBool;
        var isArr = function isArray(arr) {
            return Array.isArray(arr);
        };
        jsHelperObj.isArray = jsHelperObj.isArr = isArr;
        var _isLenPropDef = function isLengthPropertyDefined(val) {
            return isDefined(val,true) && isDefined(val.length,true);
        };
        var isEmpArr = function isEmptyArray(arr) {
            return _isLenPropDef(arr) && isEqVal(arr.length, 0);
        };
        jsHelperObj.isEmpArr = jsHelperObj.isEmptyArray = isEmpArr;
        var isEmpObj = function isEmptyObject(obj) {
            return isDefined(obj) && isObj(obj) && isEmpArr(Object.keys(obj));
        };
        jsHelperObj.isEmpObj = jsHelperObj.isEmptyObject = isEmpObj;
        var isFormData = function (formData) {
            return isFunc(FormData) ? (formData instanceof FormData) : false;
        };
        jsHelperObj.isFormData = jsHelperObj.isFormData = isFormData;
        var arrIncludes = function arrayIncludes(arr, val) {
            return isArr(arr) && !arr.every(function(eachVal, index, arr) {return eachVal !== val;});
        };
        jsHelperObj.arrayIncludes = jsHelperObj.arrIncludes = arrIncludes;
        var arrFill = function arrayFill(fillValue, arrOrCount) {
            return Array.apply(null, isArr(arrOrCount) ? arrOrCount : (Array(arrOrCount))).map(function () { return isObj(fillValue) ? jsHelper.cloneObj(fillValue, true) : fillValue });
        };
        jsHelperObj.arrFill = jsHelperObj.arrayFill = arrFill;
        var arrOfArrConcat = function arrayOfArrayConcat(arrOfArr) {
            return toArr(arrOfArr).reduce(function (p, n) {
                return p.concat(n)
            });
        };
        jsHelperObj.arrOfArrConcat = jsHelperObj.arrayOfArrayConcat = arrOfArrConcat;
        var isDate = function isDate(date) {
            return (date instanceof Date);
        };
        jsHelperObj.isDate = jsHelperObj.isDate = isDate;
        var isValidDate = function isValidDate(date) {
            /*if (isDate(date)) {
                return true;
            }
            var parsedDate = new Date(Date.parse(date));
            var parsedDateStr = parsedDate.toDateString();
            if (parsedDateStr === "Invalid Date") {
                return false;
            }
            return true;*/
            return isDate(date) ? true : not(((new Date(Date.parse(date))).toDateString()==="Invalid Date"));
        };
        jsHelperObj.isValidDate = jsHelperObj.isValidDate = isValidDate;
        var toObj = function toObject(obj, defaultObj) {
            return isObj(obj) ? obj : (isObj(defaultObj) ? defaultObj : Object.create({}));
        };
        jsHelperObj.toObject = jsHelperObj.toObj = toObj;
        var toArr = function toArray(arr, defaultArr) {
            return isArr(arr) ? arr : (isArr(defaultArr) ? defaultArr : []);
        };
        jsHelperObj.toArray = jsHelperObj.toArr = toArr;
        var toStr = function toString(val, defaultVal) {
            return isDefined(val) ? String(val) : (isDefined(defaultVal) ? String(defaultVal) : String());
        };
        jsHelperObj.toString = jsHelperObj.toStr = toStr;
        var toNum = function toNumber(val, defaultVal) {
            return (and(isDefined(val,true),not(isEqVal(Number(val),Number.NaN))))
                ? Number(val) : (isNum(defaultVal,true) ? toNumber(defaultVal,Number.NaN) : Number.NaN);
        };
        jsHelperObj.toNumber = jsHelperObj.toNum = toNum;
        var objKeys = function objectKeys(obj) {
            return ternaryFunc(isObj(obj), Object.keys(obj), []);
        };
        jsHelperObj.objectKeys = jsHelperObj.objKeys = objKeys;
        var objVals = function objectValues(obj) {
            return objKeys(obj).map(function (key) {
                return obj[key];
            });
        };
        jsHelperObj.objectValues = jsHelperObj.objVals = objVals;
        var freezeObj = function freezeObject(obj) {
            return Object.freeze(obj);
        };
        jsHelperObj.freezeObject = jsHelperObj.freezeObj = freezeObj;
        var deepFreezeObj = function deepFreezeObject(obj) {
            for (var key in obj) {
                var val = obj[key];
                if (isObj(val)) {
                    deepFreezeObject(val);
                }
            }
            return freezeObj(obj);
        };
        jsHelperObj.deepFreezeObject = jsHelperObj.deepFreezeObj = deepFreezeObj;
        var toCamelCase = function StringToCamelCase(str) {
            return str.split(/[_-]|\s+/).map(function (word, index) {/*
                // If it is the first word make sure to lowercase all the chars.
                if (isEqVal(index,0)) {
                    return word.toLowerCase();
                }
                // If it is not the first word only upper case the first char and lowercase the rest.
                return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
                */
                return isEqVal(index,0) ? word.toLowerCase() : word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
            }).join('');
        };
        jsHelperObj.toCamelCase = jsHelperObj.toCC = toCamelCase;
        var toSentence = function StringToSentence(str) {
            return str.split(/[_-]|\s+/).map(function (word, index) {
                return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
            }).join(' ');
        };
        jsHelperObj.toSentence = jsHelperObj.toSentc = toSentence;
        var _shallowCopyObj = function shallowCopyObject(obj) {
            var clone = Object.create({});
            Object.keys(toObj(obj)).forEach(function (key) {
                clone[key] = obj[key];
            });
            return clone;
        };
        var _deepCopyObj = function deepCopyObject(obj) {
            var clone = {};
            for (var i in obj) {
                clone[i] = isFunc(obj[i]) ? obj[i] : (isObj(obj[i]) ? deepCopyObject(obj[i]) : obj[i]);
            }
            return clone;
        };
        var cloneObj = function cloneObjectShallowAndDeep(obj, isDeep) {
            return isTrue(isDeep) ? _deepCopyObj(obj) : _shallowCopyObj(obj);
        };
        jsHelperObj.cloneObject = jsHelperObj.cloneObj = cloneObj;
        var defineReadOnlyObjectProperty = function defineReadOnlyObjectProperty(propContext, propName, getVal) {
            Object.defineProperty(propContext, propName, {
                get: function () {
                    return getVal;
                }
            });
            return true;
        };
        jsHelperObj.defineReadOnlyObjectProperty = jsHelperObj.defineReadOnlyObjProp = defineReadOnlyObjectProperty;
        var defineReadOnlyObjectProperties = function defineReadOnlyObjectProperties(propContext, propsObj) {
            var propertiesObj = {};
            objKeys(propsObj).forEach(function (key) {
                propertiesObj[key] = {
                    get: function () {
                        return propsObj[key];
                    }
                }
            });
            return Object.defineProperties(propContext, propertiesObj);
        };
        jsHelperObj.defineReadOnlyObjectProperties = jsHelperObj.defineReadOnlyObjProps = defineReadOnlyObjectProperties;
        var flattenObject = function flattenObject(obj) {
            /*var toReturn = {};
            for (var i in obj) {
                if (!obj.hasOwnProperty(i)) continue;
                if ((typeof obj[i]) == 'object') {
                    var flatObject = flattenObject(obj[i]);
                    for (var x in flatObject) {
                        if (!flatObject.hasOwnProperty(x)) continue;
                        toReturn[i + '.' + x] = flatObject[x];                    }
                } else {
                    toReturn[i] = obj[i];
                }
            }
            return toReturn;*/
            var toReturn = {};
            for (var i in obj) {
                if (!obj.hasOwnProperty(i)) continue;
                if (isObj(obj[i])) {
                    var flatObject = flattenObject(obj[i]);
                    for (var x in flatObject) {
                        if (!flatObject.hasOwnProperty(x)) continue;
                        toReturn[i + '.' + x] = flatObject[x];                    }
                } else {
                    toReturn[i] = obj[i];
                }
            }
            return toReturn;
        };
        jsHelperObj.flattenObject = jsHelperObj.flattenObj = flattenObject;
        var unflattenObject = function unflattenObject(obj) {
            var result = {}
            for (var i in obj) {
                var keys = i.split('.')
                keys.reduce(function (r, e, j) {
                    return r[e] || (r[e] = isNaN(Number(keys[j + 1])) ? (keys.length - 1 == j ? obj[i] : {}) : [])
                }, result)
            }
            return result
        };
        jsHelperObj.unflattenObject = jsHelperObj.unflattenObj = unflattenObject;
        var mapFlatObj = function updateFlatObjByKeyMap(keyMappingObj, fromObj, toObj) {
            if (andMany(isDefined(keyMappingObj),isDefined(fromObj),isDefined(toObj))) {
                Object.keys(keyMappingObj).forEach(function (key) {
                    var fromObjKey = key;
                    var toObjKey = keyMappingObj[key];
                    toObj[toObjKey] = fromObj[fromObjKey];
                });
                return toObj;
            }
        };
        jsHelperObj.mapFlatObject = jsHelperObj.mapFlatObj = mapFlatObj;
        var parseJson = function parseJson(jsonStr) {
            return JSON.parse(jsonStr);
        };
        jsHelperObj.parseJson = parseJson;
        var stringifyJson = function stringifyJson(json) {
            return JSON.stringify(json);
        };
        jsHelperObj.stringifyJson = stringifyJson;
        var cloneJson = function (obj) {
            return parseJson(stringifyJson(obj));
        };
        jsHelperObj.cloneJson = cloneJson;
        var extendFunc = function extendFunction(ParentFunc,ChildFunc){
            if(and(isFunc(ParentFunc),isFunc(ChildFunc))){
                ChildFunc.prototype = Object.create(ParentFunc.prototype);
                ChildFunc.prototype.constructor = ChildFunc;
                return true;
            }
            return false;
        };
        jsHelperObj.extendFunction = jsHelperObj.extendFunc = extendFunc;
        return freezeObj(jsHelperObj);
    })();
    _jsHelper.defineReadOnlyObjProp(_global, 'jsHelper', _jsHelper);
    // _jsHelper.defineReadOnlyObjProp(_global.jsHelper,'describe',"Description");
})(this);
/*******************************************JS Helper - End******************************************************/
/*******************************************Exception Handling Utility Module - Start******************************************************/

(function(_global){
    var _exceptionUtility = (function (jsHelper) {
        var exceptionUtility = {};
        
        var throwErr = function throwError(errorMsg){
            throw new Error(jsHelper.toStr(errorMsg));
        }        
        exceptionUtility.throwErr = exceptionUtility.throwError = throwErr;

        var dependencyCheck = function moduleDependencyExceptionCheck(moduleArr, moduleName) {
            if (Array.isArray(moduleArr)) {
                var filteredArr = moduleArr.filter(function (eachDependency) { return jsHelper.isDefined(eachDependency) });
                if (filteredArr.length == moduleArr.length) {
                    return;
                }
            }
            throwErr(jsHelper.toStr(moduleName) + " Module dependency missing!");
        }
        exceptionUtility.dependencyCheck = dependencyCheck;

        return jsHelper.freezeObj(exceptionUtility);
    })(_global.jsHelper);

    _global.jsHelper.defineReadOnlyObjProp(_global,'exceptionUtility',_exceptionUtility);
})(this);

/*******************************************Exception Handling Utility Module - End******************************************************/
/*******************************************App Config - Start******************************************************/

(function(_global){
    var _appConfig = (function (jsHelper) {
        if (exceptionUtility) {
            exceptionUtility.dependencyCheck([jsHelper], "App Config");
        }

        var appName = "emistoremarketplace";
        var contentRoot = "/content/" + appName;
        var apiRoot = contentRoot + "/api";
        var apiExtension = ".json";
        return jsHelper.freezeObj({
            appName: appName,
            contentRoot: contentRoot,
            apiRoot: apiRoot,
            apiExtension: apiExtension
        });
    })(_global.jsHelper);

    _global.jsHelper.defineReadOnlyObjProp(_global,'appConfig',_appConfig);
})(this);

/*******************************************App Config - Start******************************************************/
/*******************************************API Config Module - Start******************************************************/
(function (_global) {
        var _apiConfig = (function (jsHelper) {

                if (exceptionUtility) {
                        exceptionUtility.dependencyCheck([jsHelper], "API Config");
                }


                /**
                 * API   Constant Values
                 */

                var ADD_TO_CART = "ADD_TO_CART";
                var BUY_NOW = "BUY_NOW";
                var ADD_EXCHANGE = "ADD_EXCHANGE";
                var DELETE_EXCHANGE = "DELETE_EXCHANGE";
                var ADD_CD_EXCHANGE = "ADD_CD_EXCHANGE";
                var DELETE_CD_EXCHANGE = "DELETE_CD_EXCHANGE";
                var UPDATE_CD_EXCHANGE = "UPDATE_CD_EXCHANGE";
                var PRODUCT_PROTECT_PLAN = "PRODUCT_PROTECT_PLAN";
                var CD_EXCHANGE_POPUP = "CD_EXCHANGE_POPUP";
                var PLACE_ORDER = "PLACE_ORDER";
                var INSTA_BUY_POPUP = "INSTA_BUY_POPUP";
                var ADD_INSURANCE = "ADD_INSURANCE";
                var REMOVE_INSURANCE = "REMOVE_INSURANCE";
                var ADD_REVIEW = "ADD_REVIEW";
                var NOTIFYME = "NOTIFYME";
                var WISHLIST = "WISHLIST";
                var MORE_LIKE_THIS = "MORE_LIKE_THIS";
                var RESENTLY_VIEWED = "RESENTLY_VIEWED";
                var ADD_COUPON = "ADD_COUPON";
                var REMOVE_COUPON = "REMOVE_COUPON";
                var REVIEW_AND_RATING = "REVIEW_AND_RATING";
                var PROD_VAS = "PROD_VAS";
                var NETFLIX = "NETFLIX";
                var NETFLIX_StandAlone = "NETFLIX_StandAlone";
                var CATEGORIES_LIST = "CATEGORIES_LIST";
                var PLP_ONLOAD = "PLP_ONLOAD";
                var CALL_MMIAPI = "CALL_MMIAPI";
                var PLP_GET_COMPARE_LIST = "PLP_GET_COMPARE_LIST";
                var PLP_ADD_COMPARE_LIST = "PLP_ADD_COMPARE_LIST";
                var PLP_REMOVE_COMPARE_LIST = "PLP_REMOVE_COMPARE_LIST";
                var FETCHMOBILE = "FETCHMOBILE";
                var OPENREGISTER = "OPENREGISTER";
                var CALL_ME_FUNCTION = "CALL_ME_FUNCTION";
                var SAVE_DATA = "SAVE_DATA";
                var CART_TOTAL = "CART_TOTAL";
                var CITY_LIST_API = "CITY_LIST_API";
                var EXOTEL_IDENTIFIER = "EXOTEL_IDENTIFIER";
                var CROSS_SALE_BANNER = "CROSS_SALE_BANNER";
                var ONLOAD_BELL_NOTIFICATION = "ONLOAD_BELL_NOTIFICATION";
                var BELL_NOTIFICATION_UPDATE = "BELL_NOTIFICATION_UPDATE";
                var CITYWISE_CAROUSELS = "CITYWISE_CAROUSELS";

                var EDIT_PROFILE_API = "EDIT_PROFILE_API";
                var GET_PROFILE_API = "GET_PROFILE_API";
                var MY_ADDRESS_API = "MY_ADDRESS_API";
                var LIST_ADDRESS_API = "LIST_ADDRESS_API";
                var REMOVE_ADDRESS_API = "REMOVE_ADDRESS_API";
                var GET_EMI_CARD_API = "GET_EMI_CARD_API";
                var SELECT_ADDRESS = "SELECT_ADDRESS";
                /**
                * API Constants 
                */
                var apiConstants = {};
                apiConstants[ADD_TO_CART] = ADD_TO_CART;
                apiConstants[BUY_NOW] = BUY_NOW;
                apiConstants[ADD_EXCHANGE] = ADD_EXCHANGE;
                apiConstants[DELETE_EXCHANGE] = DELETE_EXCHANGE;
                apiConstants[ADD_CD_EXCHANGE] = ADD_CD_EXCHANGE;
                apiConstants[DELETE_CD_EXCHANGE] = DELETE_CD_EXCHANGE;
                apiConstants[UPDATE_CD_EXCHANGE] = UPDATE_CD_EXCHANGE;
                apiConstants[PRODUCT_PROTECT_PLAN] = PRODUCT_PROTECT_PLAN;
                apiConstants[CD_EXCHANGE_POPUP] = CD_EXCHANGE_POPUP;
                apiConstants[PLACE_ORDER] = PLACE_ORDER;
                apiConstants[INSTA_BUY_POPUP] = INSTA_BUY_POPUP;
                apiConstants[ADD_INSURANCE] = ADD_INSURANCE;
                apiConstants[REMOVE_INSURANCE] = REMOVE_INSURANCE;
                apiConstants[ADD_REVIEW] = ADD_REVIEW;
                apiConstants[NOTIFYME] = NOTIFYME;
                apiConstants[WISHLIST] = WISHLIST;
                apiConstants[MORE_LIKE_THIS] = MORE_LIKE_THIS;
                apiConstants[RESENTLY_VIEWED] = RESENTLY_VIEWED;
                apiConstants[ADD_COUPON] = ADD_COUPON;
                apiConstants[REMOVE_COUPON] = REMOVE_COUPON;
                apiConstants[REVIEW_AND_RATING] = REVIEW_AND_RATING;
                apiConstants[PROD_VAS] = PROD_VAS;
                apiConstants[NETFLIX] = NETFLIX;
                apiConstants[NETFLIX_StandAlone] = NETFLIX_StandAlone;
                apiConstants[CATEGORIES_LIST] = CATEGORIES_LIST;
                apiConstants[PLP_ONLOAD] = PLP_ONLOAD;
                apiConstants[CALL_MMIAPI] = CALL_MMIAPI;
                apiConstants[PLP_GET_COMPARE_LIST] = PLP_GET_COMPARE_LIST;
                apiConstants[PLP_ADD_COMPARE_LIST] = PLP_ADD_COMPARE_LIST;
                apiConstants[PLP_REMOVE_COMPARE_LIST] = PLP_REMOVE_COMPARE_LIST;
                apiConstants[FETCHMOBILE] = FETCHMOBILE;
                apiConstants[OPENREGISTER] = OPENREGISTER;
                apiConstants[CALL_ME_FUNCTION] = CALL_ME_FUNCTION;
                apiConstants[SAVE_DATA] = SAVE_DATA;
                apiConstants[CART_TOTAL] = CART_TOTAL;
                apiConstants[CITY_LIST_API] = CITY_LIST_API;
                apiConstants[EXOTEL_IDENTIFIER] = EXOTEL_IDENTIFIER;
                apiConstants[CROSS_SALE_BANNER] = CROSS_SALE_BANNER;
                apiConstants[ONLOAD_BELL_NOTIFICATION] = ONLOAD_BELL_NOTIFICATION;
                apiConstants[BELL_NOTIFICATION_UPDATE] = BELL_NOTIFICATION_UPDATE;
                apiConstants[EDIT_PROFILE_API] = EDIT_PROFILE_API;
                apiConstants[GET_PROFILE_API] = GET_PROFILE_API;
                apiConstants[MY_ADDRESS_API] = MY_ADDRESS_API;
                apiConstants[LIST_ADDRESS_API] = LIST_ADDRESS_API;
                apiConstants[REMOVE_ADDRESS_API] = REMOVE_ADDRESS_API;
                apiConstants[GET_EMI_CARD_API] = GET_EMI_CARD_API;
                apiConstants[SELECT_ADDRESS] = SELECT_ADDRESS;
                apiConstants[CITYWISE_CAROUSELS] = CITYWISE_CAROUSELS;


                /**
             * API Selectors
             */
                var apiSelectors = {};
                apiSelectors[ADD_TO_CART] = "add-to-cart";
                apiSelectors[BUY_NOW] = "buy-now";
                apiSelectors[ADD_EXCHANGE] = "add-exchange";
                apiSelectors[DELETE_EXCHANGE] = "delete-exchange";
                apiSelectors[ADD_CD_EXCHANGE] = "add-cd-exchange";
                apiSelectors[DELETE_CD_EXCHANGE] = "delete-cd-exchange";
                apiSelectors[UPDATE_CD_EXCHANGE] = "update-cd-exchange";
                apiSelectors[PRODUCT_PROTECT_PLAN] = "product-protect-plan";
                apiSelectors[CD_EXCHANGE_POPUP] = "cd-exchange-popup";
                apiSelectors[PLACE_ORDER] = "place-order";
                apiSelectors[INSTA_BUY_POPUP] = "insta-buy-popup";
                apiSelectors[ADD_INSURANCE] = "add-insurance";
                apiSelectors[REMOVE_INSURANCE] = "remove-insurance";
                apiSelectors[ADD_REVIEW] = "add-review";
                apiSelectors[NOTIFYME] = "notify-me";
                apiSelectors[WISHLIST] = "wishlist";
                apiSelectors[MORE_LIKE_THIS] = "more-like-this";
                apiSelectors[RESENTLY_VIEWED] = "resently-viewed";
                apiSelectors[ADD_COUPON] = "add-coupon";
                apiSelectors[REMOVE_COUPON] = "remove-coupon";
                apiSelectors[REVIEW_AND_RATING] = "review-and-rating";
                apiSelectors[PROD_VAS] = "prod-vas";
                apiSelectors[NETFLIX] = "netflix";
                apiSelectors[NETFLIX_StandAlone] = "netflix-standalone";
                apiSelectors[CATEGORIES_LIST] = "categories-list";
                apiSelectors[PLP_ONLOAD] = "plp-onload";
                apiSelectors[CALL_MMIAPI] = "mmi-onload";
                apiSelectors[PLP_GET_COMPARE_LIST] = "getcompare-list";
                apiSelectors[PLP_ADD_COMPARE_LIST] = "addcompare-list";
                apiSelectors[PLP_REMOVE_COMPARE_LIST] = "removecompare-list";
                apiSelectors[FETCHMOBILE] = "fetch-mobile";
                apiSelectors[OPENREGISTER] = "open-register";
                apiSelectors[CALL_ME_FUNCTION] = "callMe";
                apiSelectors[SAVE_DATA] = "saveData";
                apiSelectors[CART_TOTAL] = "carttotal";
                apiSelectors[CITY_LIST_API] = "cityListApi";
                apiSelectors[EXOTEL_IDENTIFIER] = "exotelidentifier";
                apiSelectors[CROSS_SALE_BANNER] = "cross-sale-banner";
                apiSelectors[ONLOAD_BELL_NOTIFICATION] = "onload-bell-notification";
                apiSelectors[BELL_NOTIFICATION_UPDATE] = "bell-notification-update";
                apiSelectors[CITYWISE_CAROUSELS] = "citywise-carousel";

                apiSelectors[EDIT_PROFILE_API] = "edit-profile-api";
                apiSelectors[GET_PROFILE_API] = "get-profile-api";
                apiSelectors[MY_ADDRESS_API] = "my-address-api";
                apiSelectors[LIST_ADDRESS_API] = "list-address-api";
                apiSelectors[REMOVE_ADDRESS_API] = "remove-address-api";
                apiSelectors[GET_EMI_CARD_API] = "get-emi-card-api";
                apiSelectors[SELECT_ADDRESS] = "selectaddress";




                /**
                 * API Empty Request Obj
                 * **/
                var apiEmptyRequestObjs = {};
                apiEmptyRequestObjs[ADD_TO_CART] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[BUY_NOW] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[ADD_EXCHANGE] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[DELETE_EXCHANGE] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[ADD_CD_EXCHANGE] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[DELETE_CD_EXCHANGE] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[UPDATE_CD_EXCHANGE] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[PRODUCT_PROTECT_PLAN] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[CD_EXCHANGE_POPUP] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[PLACE_ORDER] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[INSTA_BUY_POPUP] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[ADD_INSURANCE] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[REMOVE_INSURANCE] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[ADD_REVIEW] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[NOTIFYME] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[WISHLIST] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[MORE_LIKE_THIS] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[RESENTLY_VIEWED] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[ADD_COUPON] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[REMOVE_COUPON] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[REVIEW_AND_RATING] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[PROD_VAS] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[NETFLIX] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[NETFLIX_StandAlone] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[CATEGORIES_LIST] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[PLP_ONLOAD] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[CALL_MMIAPI] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[PLP_GET_COMPARE_LIST] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[PLP_ADD_COMPARE_LIST] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[PLP_REMOVE_COMPARE_LIST] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[FETCHMOBILE] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[OPENREGISTER] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[CALL_ME_FUNCTION] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[SAVE_DATA] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[CART_TOTAL] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[CITY_LIST_API] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[EXOTEL_IDENTIFIER] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[CROSS_SALE_BANNER] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[ONLOAD_BELL_NOTIFICATION] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[BELL_NOTIFICATION_UPDATE] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[CITYWISE_CAROUSELS] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[EDIT_PROFILE_API] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[GET_PROFILE_API] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[MY_ADDRESS_API] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[LIST_ADDRESS_API] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[REMOVE_ADDRESS_API] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[GET_EMI_CARD_API] = jsHelper.freezeObj({});
                apiEmptyRequestObjs[SELECT_ADDRESS] = jsHelper.freezeObj({});



                var getEmptyRequestObj = function (apiConstant) {
                        return jsHelper.cloneObj(apiEmptyRequestObjs[apiConstant]);
                }



                /**
                * API Empty Response  Obj
                * **/
                var apiEmptyResponseObjs = {};

                var getEmptyResponseObj = function (apiConstant) {

                        return jsHelper.cloneObj(apiEmptyResponseObjs[apiConstant]);
                }


                /**
                * API Config Object to expose
                */
                var apiConfig = {};
                Object.keys(apiConstants).forEach(function (eachApiConstant) {
                        apiConfig[eachApiConstant] = jsHelper.freezeObj({
                                "name": apiConstants[eachApiConstant],
                                "selector": apiSelectors[eachApiConstant],
                                "getEmptyRequestObj": function () {

                                        return getEmptyRequestObj(this.name);
                                }
                        });
                });

                return jsHelper.freezeObj(apiConfig);


        })(_global.jsHelper);

        _global.jsHelper.defineReadOnlyObjProp(_global, 'apiConfig', _apiConfig);
})(this);
/*******************************************API Config Module - End******************************************************/
/*******************************************AJAX Utility Module - Start******************************************************/

(function (_global) {
    var _ajaxUtility = (function (jsHelper) {
        var ajaxUtilityObj = {};
        if (exceptionUtility) {
            exceptionUtility.dependencyCheck([jsHelper], "AJAX Utility");
        }

        function postAjax(success, failure, url, data, headers) {

            var xmlhttp = new XMLHttpRequest();   // new HttpRequest instance 
            var journeyId = localStorage.getItem("journeyId") || '';
            //var newUrl = url;
           // if(journeyId){
            //    newUrl = addJourneyIDToURL(url, journeyId);
           // }

            xmlhttp.open("POST", url);

            xmlhttp.setRequestHeader("JourneyId", journeyId);

            xmlhttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    // console.info("this.responseText: ", this.responseText);
                    if (jsHelper.isFunc(success)) {
                        success(this.responseText);
                    }
                } else if (this.readyState == 4 && this.status != 200) {
                    if (jsHelper.isFunc(failure)) {
                        failure(this.responseText);
                    }
                }
            };
            xmlhttp.onerror = function () {
                if (jsHelper.isFunc(failure)) {
                    failure(this.responseText);
                }
            }

            xmlhttp.send(data);
            return xmlhttp;
        }

        /*function addJourneyIDToURL(url, journeyID) {
          var dpsPattern = /\/dps\//;
           var emistorePattern = /\/emistore\//;
           if (dpsPattern.test(url)) {
              url = url.replace(dpsPattern, '/dps/' + journeyID   + '/');
            }
            else if (emistorePattern.test(url)) {
               url = url.replace(emistorePattern, '/emistore/' + journeyID  + '/');
            }
            return url;
          }*/

        var postJson = function postAjaxJson(url, data) {
            if (!jsHelper.isObj(data)) {
                throw new Error("Request Data not defined!");
            }

            var formData = new FormData();
            formData.append("data", jsHelper.stringifyJson(data));

            var headers = {

            };

            return new Promise(function (resolve, reject) {
                var success = function (response) {
                    resolve(response);
                }
                var failure = function (error) {
                    reject(error);
                }
                postAjax(success, failure, url, formData, headers);
            });
        }
        ajaxUtilityObj.postJson = postJson;

        return jsHelper.freezeObj(ajaxUtilityObj);
    })(_global.jsHelper);

    _global.jsHelper.defineReadOnlyObjProp(_global, 'ajaxUtility', _ajaxUtility);
})(this);

/********************************************AJAX Utility Module - End******************************************************/

/*******************************************API Utility Module - Start******************************************************/

(function (_global) {
    var _apiUtility = (function fnApiUtility(jsHelper, appConfig, apiConfig, ajaxUtility) {
        if (exceptionUtility) {
            exceptionUtility.dependencyCheck([jsHelper, appConfig, apiConfig, ajaxUtility], "API Utility");
        }

        var apiUtilityObj = {};

        var getResponseJson = function (response) {
            return response["responseJson"];
        }

        var call = function callApi(eachApiConfig, data) {
            var apiUrl = appConfig.apiRoot + "." + eachApiConfig.selector + appConfig.apiExtension;
            return new Promise(function (resolve, reject) {
                ajaxUtility
                    .postJson(apiUrl, data)
                    .then(function (responseText) {
                        resolve(responseText);
                    }).catch(function (error) {
                        reject(error);
                    });
            });
        }


        /******** addToCart *********/
        var addToCart = function addToCartCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.ADD_TO_CART, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.addToCart = addToCart;

        /******** buyNow *********/
        var buyNow = function buyNowCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.BUY_NOW, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.buyNow = buyNow;

        /******** addExchange *********/
        var addExchange = function addExchangeCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.ADD_EXCHANGE, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.addExchange = addExchange;

        /******** deleteExchange *********/
        var deleteExchange = function deleteExchangeCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.DELETE_EXCHANGE, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.deleteExchange = deleteExchange;

        /******** addCdExchange *********/
        var addCdExchange = function addCdExchangeCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.ADD_CD_EXCHANGE, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.addCdExchange = addCdExchange;

        /******** deleteCdExchange *********/
        var deleteCdExchange = function deleteCdExchangeCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.DELETE_CD_EXCHANGE, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.deleteCdExchange = deleteCdExchange;

        /******** updateCdExchange *********/
        var updateCdExchange = function updateCdExchangeCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.UPDATE_CD_EXCHANGE, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.updateCdExchange = updateCdExchange;

        /******** productProtectPlan *********/
        var productProtectPlan = function productProtectPlanCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.PRODUCT_PROTECT_PLAN, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.productProtectPlan = productProtectPlan;

        /******** cdExchangePopup *********/
        var cdExchangePopup = function cdExchangePopupCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.CD_EXCHANGE_POPUP, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.cdExchangePopup = cdExchangePopup;

        /******** placeOrder *********/
        var placeOrder = function placeOrderCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.PLACE_ORDER, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.placeOrder = placeOrder;


        /******** instaBuyPopup *********/
        var instaBuyPopup = function instaBuyPopupCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.INSTA_BUY_POPUP, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.instaBuyPopup = instaBuyPopup;

        /******** addInsurance *********/
        var addInsurance = function addInsuranceCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.ADD_INSURANCE, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.addInsurance = addInsurance;

        /******** removeInsurance *********/
        var removeInsurance = function removeInsuranceCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.REMOVE_INSURANCE, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.removeInsurance = removeInsurance;


        /******** addReview *********/
        var addReview = function addReviewCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.ADD_REVIEW, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.addReview = addReview;


        /******** notifyMe *********/
        var notifyMe = function notifyMeCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.NOTIFYME, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.notifyMe = notifyMe;


        /******** wishlist *********/
        var wishlist = function wishlistCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.WISHLIST, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.wishlist = wishlist;


        /******** moreLikeThis *********/
        var moreLikeThis = function moreLikeThisCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.MORE_LIKE_THIS, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.moreLikeThis = moreLikeThis;


        /******** resentlyViewed *********/
        var resentlyViewed = function resentlyViewedCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.RESENTLY_VIEWED, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.resentlyViewed = resentlyViewed;


        /******** addCoupon *********/
        var addCoupon = function addCouponCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.ADD_COUPON, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.addCoupon = addCoupon;


        /******** removeCoupon *********/
        var removeCoupon = function removeCouponCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.REMOVE_COUPON, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.removeCoupon = removeCoupon;


        /******** reviewAndRating *********/
        var reviewAndRating = function reviewAndRatingCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.REVIEW_AND_RATING, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.reviewAndRating = reviewAndRating;

        /******** productVas *********/
        var productVas = function productVasCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.PROD_VAS, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.productVas = productVas;


        /******** netflix *********/
        var netflix = function netflixCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.NETFLIX, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.netflix = netflix;
        /******** netflix StandAlone *********/
        var netflixStandAlone = function netflixStandAloneCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.NETFLIX_StandAlone, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.netflixStandAlone = netflixStandAlone;

        /******** categories_list*********/
        var categories_list = function netflixStandAloneCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.CATEGORIES_LIST, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.categories_list = categories_list;

        var exotelidentifier = function netflixStandAloneCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.EXOTEL_IDENTIFIER, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.exotelidentifier = exotelidentifier;

        /******** PLP Onload API *********/
        var plponload = function plponloadCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.PLP_ONLOAD, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.plponload = plponload;

        /******** MMI Onload API *********/
        var CallMMIAPI = function mmiCallData(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.CALL_MMIAPI, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.mmiCallData = CallMMIAPI;

        /******** PLP Compare List *********/
        var plponload_compare_list = function plponload_compare_listCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.PLP_GET_COMPARE_LIST, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.plponload_compare_list = plponload_compare_list;

        /******** PLP AddToCompare List *********/
        var plp_AddTocompare_list = function plp_AddTocompare_listCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.PLP_ADD_COMPARE_LIST, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.plp_AddTocompare_list = plp_AddTocompare_list;

        /******** PLP RemoveToCompare List *********/
        var plp_RemoveTocompare_list = function plp_RemoveTocompare_listCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.PLP_REMOVE_COMPARE_LIST, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.plp_RemoveTocompare_list = plp_RemoveTocompare_list;

        /******** MOBILE FETCH API *********/
        var fetchMobileTest = function fetchMobileTestCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.FETCHMOBILE, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.fetchMobileTest = fetchMobileTest;

        /******** MOBILE FETCH API *********/
        var openRegister = function openRegister_functionCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.OPENREGISTER, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.openRegister = openRegister;

        /******** Call me function *********/
        var callMe = function call_me_functionCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.CALL_ME_FUNCTION, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.callMe = callMe;

        /******** save  Data function *********/
        var saveData = function save_data_functionCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.SAVE_DATA, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.saveData = saveData;


        /******** CART TOTAL function *********/
        var carttotal = function carttotal_functionCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.CART_TOTAL, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.carttotal = carttotal;

        /******** cityList Api *********/
        var cityListApi = function cityListApiCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.CITY_LIST_API, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.cityListApi = cityListApi;

        /******** Bell Notification Api *********/
        var onloadBellNotificationApi = function onloadBellNotification(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.ONLOAD_BELL_NOTIFICATION, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.onloadBellNotification = onloadBellNotificationApi;


        /******** Bell Notification Update Api *********/
        var BellNotificationUpdateApi = function BellNotificationUpdate(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.BELL_NOTIFICATION_UPDATE, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.BellNotificationUpdate = BellNotificationUpdateApi;

        /******** Cross sale banner function function *********/
        var crossSaleBannerApi = function onloadCrossSaleBanner(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.CROSS_SALE_BANNER, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.onloadCrossSaleBanner = crossSaleBannerApi;

        /******** Review sale banner function function *********/
        var reviewSaleBannerApi = function onloadCrossSaleBanner(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.CROSS_SALE_BANNER, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.onloadCrossSaleBanner = crossSaleBannerApi;

        /******** EditProfile Api *********/

        /******** EditProfile Api *********/
        var editProfile = function editProfileApiCall(data) {
            // return new Promise(function (resolve, reject) {
            //     call(apiConfig.EDIT_PROFILE_API, data)
            //         .then(function (response) {
            //             if (jsHelper.isStr(response)) {
            //                 response = jsHelper.parseJson(response);
            //             }
            //             resolve(response);
            //         }).catch(reject);
            // });
            var url = baseUrl + "/rest/V1/editprofile";
            data.requestJson.customer_user_id = " ";
            data.requestJson['customer_id'] = " ";
            sendApiRequest(data.requestJson, url, bearerTokenConfig, "POST", function (status, resp) {
                if(resp.status){
                    showToasterMsg(resp.message, resp.status);
                    localStorage.setItem('profileImage','');
                    window.setTimeout(()=> {location.reload()},3000)
                }
                else{
                    showToasterMsg('Cannot Save Profile', false);
                    console.error(resp.message);
                }
            })
        }
        apiUtilityObj.editProfileApiCall = editProfile;

        /******** GetProfile Api *********/
        var getProfile = function getProfileApiCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.GET_PROFILE_API, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.getProfileApiCall = getProfile;

        /******** My Address Api *********/
        var myAddress = function myAddressApiCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.MY_ADDRESS_API, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.myAddressApiCall = myAddress;

        /******** List Address Api *********/
        var listAddress = function listAddressApiCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.LIST_ADDRESS_API, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.listAddressApiCall = listAddress;

        /******** Remove Address Api *********/
        var removeAddress = function removeAddressApiCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.REMOVE_ADDRESS_API, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.removeAddressApiCall = removeAddress;

        /******** GetEMICardDetail Api *********/
        var getEmiCard = function getEmiCardApiCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.GET_EMI_CARD_API, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.getEmiCardApiCall = getEmiCard;

        /******** SELECT_ADDRESS Api *********/
        var selectAddressApi = function selectAddressApiCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.SELECT_ADDRESS, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.selectAddressApi = selectAddressApi;


        /******** citwise carousel Api *********/
        var cityWiseApi = function cityWiseApiCall(data) {
            return new Promise(function (resolve, reject) {
                call(apiConfig.CITYWISE_CAROUSELS, data)
                    .then(function (response) {
                        if (jsHelper.isStr(response)) {
                            response = jsHelper.parseJson(response);
                        }
                        resolve(response);
                    }).catch(reject);
            });
        }
        apiUtilityObj.cityWiseApiCall = cityWiseApi;

        return jsHelper.freezeObj(apiUtilityObj);

    })(_global.jsHelper, _global.appConfig, _global.apiConfig, _global.ajaxUtility);

    _global.jsHelper.defineReadOnlyObjProp(_global, 'apiUtility', _apiUtility);
})(this);

/*******************************************API Utility Module - End******************************************************/
    /*******************************************Data Store Utlity - Start******************************************************/
    
    /**
     * 
    */
   (function (_global) {
    
    /**
     * Data Store Name - This value to be use as attribute or key to represent Data Store indentity.
     */
    var DATA_STORE_NAME = '__dataStore__';
    var COMMON_DATA_STORE_NAME = '__common__';

    /**
     * Data Store Type Constants - Different types of Data Stores available in 
    */
    var LOCAL_STORAGE_DATA_STORE = "LOCAL_STORAGE_DATA_STORE"; 
    var SESSION_STORAGE_DATA_STORE = "SESSION_STORAGE_DATA_STORE"; 
    var IN_MEMORY_DATA_STORE = "IN_MEMORY_DATA_STORE";
    var INDEX_DB_DATA_STORE = "INDEX_DB_DATA_STORE";

    /**
     * Data Store Type Object Map
    */
    var _dataStoreObjMap = new Map();
    _dataStoreObjMap.set(LOCAL_STORAGE_DATA_STORE, new Map());
    _dataStoreObjMap.set(SESSION_STORAGE_DATA_STORE, new Map());
    _dataStoreObjMap.set(IN_MEMORY_DATA_STORE, new Map());
    _dataStoreObjMap.set(INDEX_DB_DATA_STORE, new Map());

    /**
     * Data Store Base Implementation Class Function
    */     
    function BaseDataStore(name,dataStoreType){
        var _this = this;
        if (exceptionUtility) {
            exceptionUtility.dependencyCheck([_global.jsHelper], _this.constructor.name);
        }
        var jsHelper = _global.jsHelper;
        

        // if(jsHelper.isEqRef(this.constructor,arguments.callee)){
        if(!(_this instanceof _this.constructor) && !(_this instanceof arguments.callee)){
            exceptionUtility.throwErr("Constructor "+_this.constructor.name+" requires 'new'");
        }
        if(jsHelper.isUndefined(name)){
            exceptionUtility.throwErr("'name' is mandatory!");
        }
        if(jsHelper.isUndefined(dataStoreType)){
            exceptionUtility.throwErr("'dataStoreType' is mandatory!");
        }

        jsHelper.defineReadOnlyObjProps(_this,{
            'name' : name,
            'dataStoreType' : dataStoreType,
            'dataStoreMap' : _dataStoreObjMap.get(dataStoreType)
        });

        if(jsHelper.isUndefined(_this.dataStoreMap.get(name))){
            _this.dataStoreMap.set(name,{});
        }

    };
    BaseDataStore.prototype.set = function(key,value){
        this.dataStoreMap.get(this.name)[key] = value;
        return this;
    };
    BaseDataStore.prototype.unset = function(key,setNull){
        this.dataStoreMap.get(this.name)[key] = jsHelper.isTrue(setNull) ? null : undefined;
        return this;
    };
    BaseDataStore.prototype.get = function(key){
        return this.dataStoreMap.get(this.name)[key];
    };
    BaseDataStore.prototype.delete = function(key){
        return delete(this.dataStoreMap.get(this.name)[key]);
    };

    /**
     * Data Store In Memmory Implementation Function
     */
    function InMemoryDataStore(name){
        var _this = this;
        BaseDataStore.call(_this,name,IN_MEMORY_DATA_STORE);

        jsHelper.freezeObj(_this);
    }
    jsHelper.extendFunc(BaseDataStore,InMemoryDataStore);

    /**
     * Data Store Local Storage Implementation Function
     */
    function LocalStorageDataStore(name){
        var _this = this;

        BaseDataStore.call(_this,name,LOCAL_STORAGE_DATA_STORE);

        jsHelper.freezeObj(_this);
    }
    (function(){
        /**Load Data From Local Storage - Start**/
        var dataStoreObjString = localStorage.getItem(DATA_STORE_NAME);
        if(jsHelper.isDefined(dataStoreObjString)){
            var dataStoreObj = jsHelper.parseJson(dataStoreObjString);
            if(jsHelper.not(jsHelper.isEmpObj(dataStoreObj))) {
                var localStorageDataStoreMap = _dataStoreObjMap.get(LOCAL_STORAGE_DATA_STORE);
                Object.keys(dataStoreObj).forEach(function (key) {
                    localStorageDataStoreMap.set(key, dataStoreObj[key]);
                });
            }
            localStorage.removeItem(DATA_STORE_NAME);
        }
        /**Load Data From Local Storage - End**/

        var writeData = function writeData(e){
            var localStorageDataStoreMap = _dataStoreObjMap.get(LOCAL_STORAGE_DATA_STORE);
            if(jsHelper.and(jsHelper.isDefined(localStorageDataStoreMap),jsHelper.not(jsHelper.isEqVal(localStorageDataStoreMap.size,0)))){
                var lsDataStoreObj = {};
                localStorageDataStoreMap.forEach(function(value,key){
                    lsDataStoreObj[key] = value;
                });
                localStorage.setItem(DATA_STORE_NAME,jsHelper.stringifyJson(lsDataStoreObj));
            }
        };
        window.addEventListener('beforeunload',function(e){
            writeData(e);
         });
    })();
    jsHelper.extendFunc(BaseDataStore,LocalStorageDataStore);


    /**
     * DataStore Factory
    */
    function DataStore(name,dataStoreType){
        if(jsHelper.isEqVal(dataStoreType,IN_MEMORY_DATA_STORE)){
            return new InMemoryDataStore(name);
        }else if(jsHelper.isEqVal(dataStoreType,LOCAL_STORAGE_DATA_STORE)){
            return new LocalStorageDataStore(name);
        }
    }

    /**
     * Data Store Utility
     */
    var _dataStoreUtility = (function (jsHelper) {
        if (exceptionUtility) {
            exceptionUtility.dependencyCheck([jsHelper], "Data Store Utility");
        }

        var _dataStoreUtilityObj =  {};

        /***Helper Methods - Start**/
        var _createDataStore = function (name,dataStoreType) {
            return DataStore(name,dataStoreType)
        };
        var _getDataStore = function (name,dataStoreType) {
           return jsHelper.isDefined(_dataStoreObjMap.get(dataStoreType).get(name),true) ? _createDataStore(name,dataStoreType) : null;
        };
        var _clearDataStore = function (name,dataStoreType) {
            _dataStoreObjMap.get(dataStoreType).set(name,Object.create({}));
            return this;
        };
        var _deleteDataStore = function (name,dataStoreType) {
            _dataStoreObjMap.get(dataStoreType).delete(name);
            return this;
        };
        /***Helper Methods - End**/

        var createDataStore = function createDataStore(name){
            return _createDataStore(name,IN_MEMORY_DATA_STORE);
        };
        _dataStoreUtilityObj.createDataStore = _dataStoreUtilityObj.createDS = createDataStore; 

        var createPersistentDataStore = function createPersistentDataStore(name){
            return _createDataStore(name,LOCAL_STORAGE_DATA_STORE);
        };
        _dataStoreUtilityObj.createPersistentDataStore = _dataStoreUtilityObj.createPDS = createPersistentDataStore;

        var getDataStore = function getDataStore(name){
            return _getDataStore(name,IN_MEMORY_DATA_STORE);
        };
        _dataStoreUtilityObj.getDataStore = _dataStoreUtilityObj.getDS = getDataStore;

        var getPersistentDataStore = function getPersistentDataStore(name){
            return _getDataStore(name,LOCAL_STORAGE_DATA_STORE);
        };
        _dataStoreUtilityObj.getPersistentDataStore = _dataStoreUtilityObj.getPDS = getPersistentDataStore;

        var deleteDataStore = function deletePersistentDataStore(name){
            return _deleteDataStore(name,IN_MEMORY_DATA_STORE);
        };
        _dataStoreUtilityObj.deleteDataStore = _dataStoreUtilityObj.deleteDS = deleteDataStore;

        var deletePersistentDataStore = function deletePersistentDataStore(name){
            return _deleteDataStore(name,LOCAL_STORAGE_DATA_STORE);
        };
        _dataStoreUtilityObj.deletePersistentDataStore = _dataStoreUtilityObj.deletePDS = deletePersistentDataStore;

        var clearDataStore = function clearPersistentDataStore(name){
            return _clearDataStore(name,IN_MEMORY_DATA_STORE);
        };
        _dataStoreUtilityObj.clearDataStore = _dataStoreUtilityObj.clearDS = clearDataStore;

        var clearPersistentDataStore = function clearPersistentDataStore(name){
            return _clearDataStore(name,LOCAL_STORAGE_DATA_STORE);
        };
        _dataStoreUtilityObj.clearPersistentDataStore = _dataStoreUtilityObj.clearPDS = clearPersistentDataStore;

        return jsHelper.freezeObj(_dataStoreUtilityObj);
    })(_global.jsHelper);

    _global.jsHelper.defineReadOnlyObjProp(_global, 'dataStoreUtility', _dataStoreUtility);

})(this);

/*******************************************Data Store Utlity - End******************************************************/
console.log(" Base 64 JS ");

function convertToBase64(files, skipMetadata) {
    console.log("in convert");
    console.log(files);
    console.log(skipMetadata);
    if ((files instanceof FileList)) {
        files = Array.from(files);
    } else if (!Array.isArray(files)) {
        return new Promise(function (resolve, reject) {
            reject("Invalid file array");
        });
    };


    function truncateMetadata(base64String) {
        if (skipMetadata === true) {
            var base64StrArr = String(base64String).split("base64,");
            return base64StrArr.length > 1 ? base64StrArr[1] : "";
        }
        return base64String;
    }
    
    return new Promise(function (resolve, reject) {
        var filesLoadCount = 0;
        var fileArray = new Array(files.length);
        files.forEach(function (file, index) {
            var reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = function () {
                fileArray[index] = truncateMetadata(reader.result);
                filesLoadCount++;
            };
            reader.onerror = function (error) {
                console.log('Error: ', error);
            };
        });
        var intervalId;
        intervalId = setInterval(function () {
            if (filesLoadCount === fileArray.length) {
                resolve(fileArray);
                clearInterval(intervalId);
            }
        }, 500);
    });
}
(function (_global) {
    'use strict'
    {
        const apiRoot = "/content";
        const appName = "Stalwart";
        const stalwartShortNamePrefix = "sw";
        const dataAttributePrefix = "data-sw"
        const SUBMIT_EVENT_NAME = `${stalwartShortNamePrefix}:submit`;
        const AUTHORIZATION_KEY = "Authorization";
        const UNAUTHORIZATION_KEY = "unauthorization";
        const authorizationTypes = {
            "COOKIE": "cookie"
        };
        const dataAttributes = {
            "ID": `${dataAttributePrefix}-id`,
            "NAME": `${dataAttributePrefix}-name`,
            "AUTO_REGISTER": `${dataAttributePrefix}-auto-register`
        };


        let stalwart = {};

        /** Http Service & Factory Classes */
        {
            let httpServiceMap = new WeakMap;
            class HttpService {
                constructor(httpConfig) {
                    let httpServiceData = {
                        name: httpConfig.name,
                        channelType: httpConfig.channelType,
                        authorized: httpConfig.authorized,
                        authorizationType: httpConfig.authorizationType ? httpConfig.authorizationType : authorizationTypes.COOKIE,
                        path: httpConfig.path,
                        method: httpConfig.method,
                        url: `${apiRoot}${httpConfig.path ? ('/' + httpConfig.path) : ''}/${httpConfig.channelType}/${httpConfig.name}`,
                        params: Object.assign({}, httpConfig.params),
                        headers: Object.assign({}, httpConfig.headers)
                    };
                    if (httpConfig.name === UNAUTHORIZATION_KEY) {
                        httpServiceData.preUnauthorization = jsHelper.isFunc(httpConfig.preUnauthorization) ? httpConfig.preUnauthorization : () => exceptionUtility.throwError("preUnauthorization not a valid function!");
                        httpServiceData.url = httpConfig.url;
                    }
                    httpServiceMap.set(this, httpServiceData);
                }

                call(requestJson, requestHeaders = {}, selector) {
                    if (requestJson) {
                        const props = httpServiceMap.get(this);
                        let params = props.params;
                        let url;
                        if (requestJson.queryParams) {
                            url = props.url + "?" + (requestJson.queryParams ? Object.keys(requestJson.queryParams).map((key) => key + "=" + requestJson.queryParams[key]).join("&") : "");
                        } else {
                            url = props.url + (params ? Object.entries(params).map((key, value) => key + "=" + value).join("&") : "");
                        }
                        let headers = {
                            ...requestHeaders,
                            ...props.headers
                        };
                        if (props.authorized === true && !headers[AUTHORIZATION_KEY]) {
                            switch (props.authorizationType) {
                                case authorizationTypes.COOKIE:
                                    let authorization = domUtils.getCookie(AUTHORIZATION_KEY);;
                                    if (jsHelper.isUndef(authorization)) {
                                        exceptionUtility.throwError(`${appName}: ${AUTHORIZATION_KEY} Token Invalid!`);
                                    }
                                    break;
                            }
                        }
                        return new Promise((resolve, reject) => {
                            if ('Worker' in window) {
                                //  let worker = new Worker('/worker/api-worker.js');
                                let worker = new Worker('/content/emistoremarketplace/worker/api-worker.js');
                                let apiDetails = {
                                    "props": props,
                                    "requestJson": requestJson,
                                    "url": url,
                                    "headers": headers,
                                    "selector": selector
                                }
                                worker.postMessage(apiDetails);
                                worker.addEventListener('message', function (e) {
                                    var response = e.data;
                                    switch (response.status) {
                                        case 200:
                                            resolve(response.responseText);
                                            break;
                                        case 401:
                                        case 503:
                                        default:
                                            reject(response.responseText);
                                    }
                                });
                            } else {
                                var xmlhttp = new XMLHttpRequest(); // new HttpRequest instance 
                                let url = selector ? (url + selector) : url;
                                xmlhttp.open(props.method, url);
                                // Object.keys(requestJson.queryParams).forEach((key, value) => xmlhttp.setRequestHeader(key, value));
                                xmlhttp.onreadystatechange = function () {
                                    switch (this.readyState) {
                                        case 4:
                                            switch (this.status) {
                                                case 200:
                                                    resolve(this.responseText);
                                                    break;
                                                case 401:
                                                case 503:
                                                default:
                                                    reject(this.responseText);
                                            }
                                        case 1:
                                        case 2:
                                        case 3:
                                        default:
                                    };
                                };
                                xmlhttp.onerror = function () {
                                    reject(this.responseText);
                                };
                                var formData = new FormData();
                                formData.append("data", jsHelper.stringifyJson(requestJson));
                                xmlhttp.send(formData);
                            }
                        });
                    }

                    return new Promise((resolve, reject) => reject("requestJson not defined!"));
                }

                static httpService(httpConfig) {
                    return new HttpService(httpConfig);
                }
            }

            let httpServiceFactoryMap = new WeakMap;
            class HttpServiceFactory {
                constructor() {
                    httpServiceFactoryMap = new Map;
                    httpServiceFactoryMap.set(this, {});
                }

                registerService(serviceName, httpService) {
                    if (!(httpService instanceof HttpService)) {
                        throw Error("Not an HttpService instance!");
                    }
                    httpServiceFactoryMap.get(this)[serviceName] = httpService;
                }

                getService(serviceName) {
                    return httpServiceFactoryMap.get(this)[serviceName];
                }

                static httpServiceFactory() {
                    return new HttpServiceFactory;
                }
            }

            let eventDispatcherMap = new WeakMap;
            class EventDispatcher {
                constructor(domElement) {
                    eventDispatcherMap.set(this, domElement);
                }

                static eventDispatcher(domElement) {
                    return new EventDispatcher(domElement);
                }

                dispatchEvent(data, headers, selector) {
                    const domElement = eventDispatcherMap.get(this);
                    return (domElement instanceof HTMLElement) ? new Promise((resolve, reject) => {
                        let swSubmitEvent = new CustomEvent(SUBMIT_EVENT_NAME, {
                            detail: {
                                data: data,
                                headers: headers,
                                selector: selector,
                                callback: (status, response) => (status === true ? resolve : reject)(response)
                            }
                        });
                        domElement.dispatchEvent(swSubmitEvent);
                    }) : new Promise((resolve, reject) => reject("Not a valid DOM Element"))
                }
            }

            Object.defineProperty(_global, 'HttpService', {
                get: () => HttpService.httpService
            });
            Object.defineProperty(_global, 'HttpServiceFactory', {
                get: () => HttpServiceFactory.httpServiceFactory
            });
            Object.defineProperty(_global, 'EventDispatcher', {
                get: () => EventDispatcher.eventDispatcher
            });
        }

        /** Document 'DOMContentLoaded' Event registeration function. */
        function DOMContentLoadedEvent(fn) {
            var _window = window;
            if (_window) {
                if (_window.document && (_window.document instanceof _window.Document) && (typeof (fn) === "function")) {
                    document.addEventListener("DOMContentLoaded", fn);
                }
            }
        }

        /** HTTP Service Registration */
        DOMContentLoadedEvent(() => {
            /** Registering HttpServices - Start*/
            let httpServiceFactory = HttpServiceFactory();
            Object.defineProperty(stalwart, 'httpServiceFactory', {
                get: () => httpServiceFactory
            });
            Object.defineProperty(stalwart, 'registerHttpService', {
                get: () => (httpConfig) => httpServiceFactory.registerService(httpConfig.name, HttpService(httpConfig))
            });
            Object.defineProperty(stalwart, 'createHttpConfig', {
                get: (name, method, channelType, params, headers) => Object.freeze({
                    name: name,
                    method: method,
                    params: params,
                    headers: headers,
                    url: `${apiRoot}/${channelType}/${name}`
                })
            });
            /** Registering HttpServices - End*/
        });

        /** Generic Event Dispatcher Code */
        DOMContentLoadedEvent(() => {
            let meta = document.createElement('meta');
            meta.setAttribute(dataAttributes["NAME"], appName);

            meta.addEventListener(SUBMIT_EVENT_NAME, e => {
                console.info(`${SUBMIT_EVENT_NAME} called...`, e);
                let detail = e.detail;
                if (detail) {
                    let data = detail.data;
                    let headers = detail.headers;
                    let selector = detail.selector;
                    let name = Object.keys(data)[0];
                    let callback = detail.callback;
                    let requestObj = data[name];
                    if ((typeof (stalwart) === "object") && stalwart.httpServiceFactory) {
                        var httpService = stalwart.httpServiceFactory.getService(name);
                        if (httpService) {
                            httpService.call(requestObj, headers, selector).then(response => {
                                console.info("Received response: ", JSON.stringify(response));
                                callback(true, response);
                            }).catch(error => callback(false, error));
                        }
                    }
                }
            });
            document.head.appendChild(meta);
            var eventDispatcher = _global.EventDispatcher(meta);
            Object.defineProperty(stalwart, 'eventDispatcher', {
                get: () => eventDispatcher
            });
        });

        /** Read Forms and Register FormHandlers */
        /** On FormHandler invocation of Generic Event Dispatcher */
        DOMContentLoadedEvent(() => {
            /** Get all the HTML Forms - Start */
            console.log("Reading HTML Forms...");
            let forms = document.body.querySelectorAll(`form[${dataAttributes["AUTO_REGISTER"]}=true]`);
            if (forms instanceof NodeList) {
                // let responseTextNodeMap = new WeakMap;
                forms.forEach(formNode => formNode.addEventListener('submit', e => {
                    e.preventDefault();
                    var data = {};
                    data[dataAttributes["ID"]] = formNode.getAttribute(dataAttributes["ID"]);
                    var promise = stalwart.eventDispatcher.dispatchEvent(data);
                    if (promise) {
                        promise.then(response => {
                            console.info(`data: ${JSON.stringify(response)}`);
                            /** Add response to texNode below form */
                            // var textNode = responseTextNodeMap.get(formNode);
                            // if(!textNode){
                            //     textNode = document.createTextNode('');
                            //     responseTextNodeMap.set(formNode,textNode);
                            // }
                            // textNode.data = JSON.stringify(response);
                            // textNode.style="padding-top: 2%;";
                            // formNode.appendChild(textNode);
                        }).catch(httpError => {
                            console.error(`Error! | ${httpError}`);
                        });
                    }
                }));
            }
            console.log("forms: ", forms);
            console.log("Reading HTML Forms Completed!");
            /** Get all the Forms - End */
        });

        /** Expose Stalwart Object in Global */
        Object.defineProperty(_global, appName, {
            get: () => stalwart
        });
    }
})(this);
/*******************************************Stalwart API Config Module - Start******************************************************/
(function (_global) {
    var _stalwartApiConfig = (function (jsHelper) {
        var cityID = parseInt(localStorage.getItem("cityId"));
        if($("meta[name=pageType]").attr("content") === 'pdp'){
        try {
                var skuName = document.querySelector('meta[name="productSku"]').getAttribute('content');
                var productID = document.querySelector('meta[name="entityID"]').getAttribute('content')

            } catch (err) {
                console.error('%c '+err,'color:white');
            }
        }

        if (exceptionUtility) {
            exceptionUtility.dependencyCheck([jsHelper], "API Config");
        }
        var stalwartApiConfig = {};

        var _pdpdData = {
            "name": "pdpdata",
            "channelType": "emistoremarketplace",
            "path": "",
            "method": "GET",
            "authorized": false
        }
        stalwartApiConfig.pdpdData = _pdpdData;

        var _productProtactPlan = {
            "name": 'api.product-protect-plan.' + skuName + '.json',
            "channelType": "emistoremarketplace",
            "path": "",
            "method": "GET",
            "authorized": false
        }
        stalwartApiConfig.productProtactPlan = _productProtactPlan;

        var _productVas = {
            "name": 'api.prod-vas.json',
            "channelType": "emistoremarketplace",
            "path": "",
            "method": "POST",
            "authorized": false
        }
        stalwartApiConfig.productVas = _productVas;

        var _callMe = {
            "name": 'api.callMe.json',
            "channelType": "emistoremarketplace",
            "path": "",
            "method": "POST",
            "authorized": false
        }
        stalwartApiConfig.callMe = _callMe;

        var _saveData = {
            "name": 'api.saveData.json',
            "channelType": "emistoremarketplace",
            "path": "",
            "method": "POST",
            "authorized": false
        }
        stalwartApiConfig.saveData = _saveData;

        var _updateCdExchnage = {
            "name": 'api.update-cd-exchange.json',
            "channelType": "emistoremarketplace",
            "path": "",
            "method": "POST",
            "authorized": false
        }
        stalwartApiConfig.updateCdExchnage = _updateCdExchnage;

        

        var _fetchMobileTest = {
            "name": 'api.fetch-mobile.json',
            "channelType": "emistoremarketplace",
            "path": "",
            "method": "POST",
            "authorized": false
        }
        stalwartApiConfig.fetchMobileTest = _fetchMobileTest;

        var _openRegister = {
            "name": 'api.open-register.json',
            "channelType": "emistoremarketplace",
            "path": "",
            "method": "POST",
            "authorized": false
        }
        stalwartApiConfig.openRegister = _openRegister;
        
        var _netflix = {
            "name": 'api.netflix.' + skuName + '.json',
            "channelType": "emistoremarketplace",
            "path": "",
            "method": "GET",
            "authorized": false
        }
        stalwartApiConfig.netflix = _netflix;

        var _productRating = {
            "name": 'api.product-rating.' + productID + '.json',
            "channelType": "emistoremarketplace",
            "path": "",
            "method": "GET",
            "authorized": false
        }
        stalwartApiConfig.productRating = _productRating;

        var _cdExchangePopup = {
            "name": 'api.cd-exchange-popup.json',
            "channelType": "emistoremarketplace",
            "path": "",
            "method": "GET",
            "authorized": false
        }
        stalwartApiConfig.cdExchangePopup = _cdExchangePopup;

        var _comparePdp = {
            "name": 'api.pdp-compare.' + skuName + '.json',
            "channelType": "emistoremarketplace",
            "path": "",
            "method": "GET",
            "authorized": false
        }
        stalwartApiConfig.comparePdp = _comparePdp;


        var _carttotal = {
            "name": 'api.carttotal.json',
            "channelType": "emistoremarketplace",
            "path": "",
            "method": "POST",
            "authorized": false
        }
        stalwartApiConfig.carttotal = _carttotal;

        var _cityListApi = {
            "name": 'api.cityListApi.json',
            "channelType": "emistoremarketplace",
            "path": "",
            "method": "GET",
            "authorized": false
        }
        stalwartApiConfig.cityListApi = _cityListApi;


        document.addEventListener('DOMContentLoaded', function (e) {
            /**
            * API Config Object to expose
            */
            console.log("skuName: ", skuName);
            Object.values(stalwartApiConfig).forEach(function (value) {
                if (jsHelper.isFunc(Stalwart.registerHttpService)) {
                    Stalwart.registerHttpService(value);
                }
            });
        });



        return jsHelper.freezeObj(stalwartApiConfig);
    })(_global.jsHelper);

    _global.jsHelper.defineReadOnlyObjProp(_global, 'stalwartApiConfig', _stalwartApiConfig);
})(this);
/*******************************************Stalwart API Config Module - End******************************************************/

/* API REQUEST */
function sendApiRequest(
    reqData,
    url,
    bearerToken,
    methodType,
    callBack,
    customerToken,
    dataType,
    worker,
    selector,
    basicAuth,
    authtoken
) {
    if(!localStorage.getItem("journeyId")) {
        var journeyId = generateJourneyId();
        localStorage.setItem("journeyId",journeyId);
    }
    
    
    if (worker && isWebWorkerEnabled == "true") {
        var urlSplit = url.split('/');
        var urlName = selector ? urlSplit[urlSplit.length - 1].split('.')[0] : urlSplit[urlSplit.length - 1];
        var reqObj = {
            [urlName]: reqData ? reqData : {}
        }
        var header = {
            "Authorization": "Bearer " + (bearerToken ? bearerToken : customerToken),
            "CSRF-Token": localStorage.csrfToken,
            "JourneyId" : localStorage.journeyId || ''
        }
        var eventDispatcher = Stalwart.eventDispatcher.dispatchEvent(reqObj, header,selector);
        eventDispatcher.then(function (response) {
            var response = JSON.parse(response);
            callBack(true, response);
        }).catch(function (err) {
            console.error('Error !!! \n', err);
            callBack(false, err);
        });
    } else {
        var journeyId = localStorage.getItem("journeyId") || '';
        /*var newUrl = url;
        if(journeyId){
            newUrl = addJourneyIDToURL(url, journeyId);
        }*/

        var urlName = selector ? url + selector: url;
        if (methodType == "GET") {
            $.ajax({
                type: "GET",
                contentType: "application/json",
                url: urlName,
                dataType: dataType,
                beforeSend: function (xhr) {
                    if (bearerToken) {
                        xhr.setRequestHeader("Authorization", bearerToken);
                        xhr.setRequestHeader("Authtoken", authtoken);
                    } else {
                        if (customerToken) {
                            xhr.setRequestHeader("Authorization", "Bearer " + customerToken);
                            xhr.setRequestHeader("Authtoken", authtoken);
                        }
                    }
                    xhr.setRequestHeader("JourneyId",journeyId);
                },
                success: function (data) {
                    callBack(true, data);
                },
                error: function (xhr) {
                    callBack(false, xhr.responseJSON);
                }
            });
        } else {
            $.ajax({
                type: "POST",
                contentType: "application/json",
                url: urlName,
                data: JSON.stringify(reqData),
                dataType: dataType,
                beforeSend: function (xhr) {
                    if (bearerToken) {
                        xhr.setRequestHeader("Authorization", bearerToken);
                        xhr.setRequestHeader("Authtoken", authtoken);
                    } else {
                        if (customerToken) {
                            xhr.setRequestHeader("Authorization", "Bearer " + customerToken);
                            xhr.setRequestHeader("Authtoken", authtoken);
                        }
                    }
                    if (basicAuth) {
                        xhr.setRequestHeader("Authorization", "Basic " + basicAuth);
                        xhr.setRequestHeader("Authtoken", authtoken);
                    }
                    xhr.setRequestHeader("JourneyId",journeyId);
                },
                success: function (data) {
                    callBack(true, data);
                },
                error: function (xhr) {
                    callBack(false, xhr.responseJSON);
                }
            });
        }
    }

}


function sendApiRequestCrossDomain(
    reqData,
    url,
    bearerToken,
    methodType,
    callBack,
    customerToken,
    dataType,
    basicAuth,
    authtoken) {
    if (!localStorage.getItem("journeyId")) {
        var journeyId = generateJourneyId();
        localStorage.setItem("journeyId", journeyId);
    }
    var journeyId = localStorage.getItem("journeyId") || '';
    /*var newUrl = url;
    if(journeyId){
        newUrl = addJourneyIDToURL(url, journeyId);
    }*/
    $.ajax({
        url: url,
        type: methodType,
        async: true,
        contentType: "application/json",
        dataType: dataType,
        data: JSON.stringify(reqData),
        crossDomain: true,
        xhrFields: { withCredentials: true },
        beforeSend: function (xhr) {
            if (bearerToken) {
                xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
                xhr.setRequestHeader("Authorization", bearerToken);
                xhr.setRequestHeader("Authtoken", authtoken);
            } else {
                if (customerToken) {
                    xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
                    xhr.setRequestHeader("Authorization", "Bearer " + customerToken);
                    xhr.setRequestHeader("Authtoken", authtoken);
                }
            }
            if (basicAuth) {
                xhr.setRequestHeader("Authorization", "Basic " + basicAuth);
                xhr.setRequestHeader("Authtoken", authtoken);
            }
            xhr.setRequestHeader("JourneyId",journeyId);
        },
        success: function (data) {
            callBack(true, data);
        },
        error: function (xhr) {
            callBack(false, xhr.responseJSON);
        }
    })
}

function getSystemIdValue(){

    //format the systemID to json object
	var systemId = systemID;
    systemId = systemId
      .replace(/\s/g, '')
      .split(',')
      .map(pair => pair.split(':'))
      .map(([key, value]) => [key.replace(/[\[\]']+/g, ''), parseInt(value)])
      .reduce((obj, [key, value]) => {
        obj[key] = value;
        return obj;
      }, {});

    var referrer = document.referrer;
    if(referrer == ''){
        referrer = "bajajmall"
    }

    //Fetch SystemID value from OSGI config based on referrer value
    var referrerValue = Object.entries(systemId).find(([key, value]) => referrer.includes(key));
    var result = referrerValue ? referrerValue[1] : systemId.default;
    return result;

}

function generateJourneyId() {
    //Generate uuid of 32 bit
      var uuid =  Math.floor(Math.random() * Date.now()).toString(36);

      //Generate timestamp
      const now = new Date();
      var options = {
          timeZone: 'Asia/Kolkata',
          hour12: false,
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit'
    };
        var timeStamp = now.toLocaleString('en-IN', options);

        var systemId = getSystemIdValue();
        var journeyId =  systemId + timeStamp + uuid;
        journeyId = journeyId.replace(/[^a-zA-Z0-9]/g, '');
        journeyId = "jid-" + journeyId;
        return journeyId;

}

/*function addJourneyIDToURL(url, journeyID) {
    var dpsPattern = /\/dps\//;
    var emistorePattern = /\/emistore\//;
    if (dpsPattern.test(url)) {
      url = url.replace(dpsPattern, '/dps/' + journeyID   + '/');
    }
    else if (emistorePattern.test(url)) {
       url = url.replace(emistorePattern, '/emistore/' + journeyID  + '/');
    }
    return url;
  }*/

var emiStoreApiData;
(function () {
    var dataMapping = {
        productDetails: {
            api: {
                apiName: {
                    call: function () { this.response = "responseData" },
                    response: "Response"
                },
                extendWarranty: {   },
                onloadPDPData: {
                    call: function () { this.response = "responseData" },
                    response: "Response"
                },
                onloadProductPDPData: {
                    call: function () { this.response = "respData" },
                    response: "Response"
                },
                allVarientsData: {
                    call: function () { this.response = "responseData" },
                    response: "Response"
                },
                offerBannerData: {
                    call: function () { this.response = "responseData" },
                    response: "Response"
                },

            },
            productName: "Product Name",
            sellers: [{}, {}],
            defaultSeller: "",
            emis: [{}, {}],
            rating: "",
            review: "",
            compareProducts: "",
            similarProducts: "",
            netflix: "",
            callMe: "",
            vas: "",
            protectPlan: "",
        },
        customerDetails: {
            api: {
                customerToken: "",
                apiName: {// login api
                    call: function () { this.response = "responseData" },
                    response: "Response"
                },
                creditCardLimit: {
                    call: function () { this.response },
                    response: ""
                },
                onloadGetProfile: {
                        call: function () { this.response = "responseData" },
                        response: "Response"
                },
                getProfileData: {
                        call: function () { this.response = "responseData" },
                        response: "Response"
                },
                getEmiDetails: {
                        call: function () { this.response = "responseData" },
                        response: "Response"
                },
                listAddress: {
                        call: function () { this.response = "responseData" },
                        response: "Response"
                },
                helpSupport: {
                    call: function () { this.response = "responseData" },
                    response: "Response"
                },
                bannerCarousel:{
                    call: function () { this.response = "responseData" },
                    response: ""
                },
                icorsFetchOffer:{
                    call: function () { this.response = "responseData" },
                    response: "Response"
                },
                icorsFetchOffer4w:{
                    call: function () { this.response = "responseData" },
                    response: "Response"
                },
            },
            selectedSeller: {},
            cardDetails: {
                cardLimit: 0,
            },
            bellNotification: { onloadBellNotification: {} },
            citywiseCarousel: {
                allData: {
                    call: function () { this.response = "responseData" },
                    response: "Response"
                }
            },
            fullname: "",
            customerToken: "",
            getcustomerToken: function () { 
                return this.customerToken;
            },
            offerAmount: { amount: 0}
        },
        bfdlwebapi: {

            api: {

                orderdetails: {

                    call: function () { this.response = "responseData" },

                    response: "Response"

                },

            },

        },
        faq: {

            api: {

                faqdetails: {

                    call: function () { this.response = "responseData" },

                    response: "Response"

                },

            },

        },
        varientDetails: {

            api: {

                varients: {

                    call: function () { this.response = [] },

                    response: []

                },

            },

        },
        instaPopupData: {
            api: {
                instaPopup: {
                    call: function () { this.response = "responseData" },
                    response: "Response"
                },
                couponList: {
                    call: function () { this.response = "responseData" },
                    response: "Response"
                },
                placeorder: {
                    call: function () { this.response = "responseData" },
                    response: "Response"
                },
                atosRequery: {
                    call: function () { this.response = "responseData" },
                    response: null
                },
            },
        },
        cartDetails: {
            api: {
                onloadCartList: {
                    response: "",
                    status: ""
                },
                paytmentSummary: {
                    response: "",
                    status: ""
                },
                cartProceed: {
                    response: "",
                    status: ""
                }
            }
        },
        searchDetails: {
            searchProductResp: "Response",
            searchCategoryResp: "Response",
            searchData: []
        },
        autoSuggestive: { autoSuggestiveData: {} },
        footerDocks: {

            api: {

                onloadCartView: {

                    response: "",

                    status: ""

                },

                wishlistProduct: {

                    response: "",

                    status: ""

                },

                smartphones: {

                    response: "",

                    status: ""

                },

                productRecommdation: {

                    response: "",

                    status: ""

                }

            }

        },
        searchPlpRecommendation:{
            api:{
                productRecommendation:{
                    response: "",
                    status : ""
                }
            }
        },
        nonLoggedinBellNotification: {},
        filterDetails: {
            api: {
                finderComponentApi: {
                    response: "",
                    status: ""
                }
            }
        },
        newFilterDetails: {
            api: {
                NewfinderComponentApi: {
                    response: "",
                    status: ""
                }
            }
        },
        faqDetails: {},
        RealtimeOutOfStockBanner: {
            api: {
                response: "",
                status: ""
            }
        },
        creditCardOffers:{
            api: {
                response: "",
                status: ""
            }
        },
        coinFetch: {
            api: {
                response: "",
                status: ""
            }
        },
        consentrequest: {
            api: {
                response: "",
                status: ""
            }
        },
        autoSearch: {
             api: {
                response: "",
                status: "",
                searchKey:""
             }
        },
        crosssellbanners: {
            api: {
                response: "",
                status: ""
            }
        },
        minipdp:{},
        loanPodPlaceOrder: {}

    }
    if (!emiStoreApiData) {
        emiStoreApiData = dataStoreUtility.createPDS("emiStore-PDP");
    } else {
        emiStoreApiData = dataStoreUtility.getPDS("emiStore-PDP");
    }
    emiStoreApiData.set("dataMapping", dataMapping);
})();
var biz = {};
var render = {};
var api = {};


var _getDataMapping = function () {
    var obj = emiStoreApiData.get("dataMapping");
    var newObj = JSON.parse(JSON.stringify(obj));
    return newObj;
}

var _setDataMapping = function (obj) {
    var newObj = JSON.parse(JSON.stringify(obj));
    emiStoreApiData.set("dataMapping", newObj);
}
function getOnlyNumber(val) {
    var num = "";
    var i = 0;
    while (i <= val.length) {
        if (isNaN(parseInt(val[i]))) {
        } else {
            num += val[i]
        }
        i++;
    }
    num = parseInt(num);
    if (isNaN(num)) {
        return "";
    }
    return num;
}

function setElementValue(className, val, parent) {
    var partEl = parent || document;
    var txtclass = "." + className + "-txt";
    var valclass = "." + className + "-val";
    var radclass = "." + className + "-rad";
    var imgclass = "." + className + "-img";
    var rsclass = "." + className + "-rs";
    var mulrsclass = "." + className + "-mul-rs";
    var mulclass = "." + className + "-mul-txt";
    var mulvalclass = "." + className + "-mul-val";

    if (partEl.querySelector(txtclass)) {
        partEl.querySelector(txtclass).innerText = val;

    }

    if (partEl.querySelector(valclass)) {
        partEl.querySelector(valclass).value = val;

    }

    if (partEl.querySelector(radclass)) {
        partEl.querySelectorAll(radclass).forEach(function (each) {
            each.checked = false;
        });
        var selectedRadCls = radclass + '[value="' + val + '"]'
        partEl.querySelector(selectedRadCls).checked = true;

    }
    if (partEl.querySelector(imgclass)) {
        partEl.querySelector(imgclass).setAttribute("src", val);

    }
    if (partEl.querySelector(rsclass)) {
        val = "₹" + parseInt(val).toLocaleString('en-IN');
        partEl.querySelector(rsclass).innerText = val;

    }
    if (partEl.querySelectorAll(mulvalclass).length) {
        partEl.querySelectorAll(mulvalclass).forEach(function (eachEl) {
            eachEl.value = val;
        })
    }
    if (partEl.querySelectorAll(mulclass).length) {
        partEl.querySelectorAll(mulclass).forEach(function (eachEl) {
            eachEl.innerText = val;
        })
    }
    if (partEl.querySelectorAll(mulrsclass).length) {
        val = "₹" + parseInt(val).toLocaleString('en-IN');
        partEl.querySelectorAll(mulrsclass).forEach(function (eachEl) {
            eachEl.innerText = val;
        })
    }

    
}


function getAmount(val, format) {
    try {
        var val = typeof val == "number" ? val : parseInt(val);
        if (format) {
            var data = "₹" + val.toLocaleString(format);
        } else {
            var data = "₹" + val.toLocaleString();
        }
        return data;
    } catch (error) {
        console.error('%c ' + error, 'color:orange')
        return "";
    }
}

function getDiscount(mrp, price, discounttype) {
    var val = "";
    if (discounttype == "in-amount") {
        val = mrp - price;
    } else if (discounttype == "in-percentage") {
        val = Math.round(((mrp - price) / mrp) * 100);
    }
    return val;
}

function sortBy(arr, key, way) {
    return arr.sort(function(a, b) {
        var x = a[key]; var y = b[key];
        if (way === '123') { return ((x < y) ? -1 : ((x > y) ? 1 : 0)); }
        if (way === '321') { return ((x > y) ? -1 : ((x < y) ? 1 : 0)); }
    });
}
function getAmountInNumber(val) {
    var val = val.replace(/,/g, '').replace(/₹/g, '')
    val = typeof val == "number" ? val : parseInt(val);
    val = parseInt(val)
    return val;
}


var __common_service = {};
__common_service.getOnlyNumber = getOnlyNumber;
__common_service.getAmount = getAmount;
__common_service.getAmountInNumber = getAmountInNumber;
__common_service.setElementValue = setElementValue;
__common_service.sortBy = sortBy;
__common_service.getDiscount = getDiscount;
/*
    console.error('%c ' + error, 'color:orange')


*/

